# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:55:25+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import (
    AutocompleteSearchSuggestions,
    Banners,
    Correction,
    Error,
    Facets,
    ProductSearch,
    SearchSuggestions,
    SimulationBehavior,
    Sort,
    TopSearches,
)

app = MCPProxy(
    description=">ℹ️ Onboarding guide\r\n>\r\n> Check the new [Search onboarding guide](https://developers.vtex.com/docs/guides/search-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Search and is organized by focusing on the developer's journey.\r\n\r\nThis API is from the [VTEX Intelligent Search](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/3qgT47zY08biLP3d5os3DG) solution, an alternative to the platform’s native search, as it assists the customer in their purchase journey, and it presents results since the first interaction with the search bar.\r\n\r\n## Index\r\n- [Get list of the 10 most searched terms](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/top_searches)\r\n- [Get list of suggested terms and attributes similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/autocomplete_suggestions)\r\n- [Get attempt of correction of a misspelled term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/correction_search)\r\n- [Get list of banners registered for query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/banners/-facets-)\r\n- [Get list of suggested terms similar to the search term](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/search_suggestions)\r\n- [Get list of products for a query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/product_search/-facets-)\r\n- [Get list of the possible facets for a given query](https://developers.vtex.com/docs/api-reference/intelligent-search-api#get-/facets/-facets-)",
    license={'name': 'MIT'},
    title='Intelligent Search API',
    version='0.1.12',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX IO Intelligent Search server URL.',
            'url': 'https://{accountName}.vtexcommercestable.com.br/api/io/_v/api/intelligent-search',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Your VTEX account name.',
                }
            },
        },
    ],
)


@app.get(
    '/autocomplete_suggestions',
    description=""" Lists the suggested terms and attributes similar to the search term. """,
    tags=['search_suggestions'],
)
def get_autocomplete_suggestions(
    query: Optional[str] = None, locale: Optional[str] = None
):
    """
    Get list of suggested terms and attributes similar to the search term
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/banners/{facets}',
    description=""" Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature. """,
    tags=['banner_display_management', 'facet_filter_management'],
)
def get_banners__facets(
    query: Optional[str] = None, facets: str = '/', locale: Optional[str] = None
):
    """
    Get list of banners registered for query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/correction_search',
    description=""" Tries to correct a misspelled term from the search. """,
    tags=['search_suggestions'],
)
def get_correction_search(query: Optional[str] = None, locale: Optional[str] = None):
    """
    Get attempt of correction of a misspelled term
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/facets/{facets}',
    description=""" Lists the possible facets for a given query """,
    tags=['facet_filter_management', 'product_listing_search'],
)
def get_facets__facets(
    facets: str = '/',
    query: Optional[str] = None,
    locale: Optional[str] = None,
    hide_unavailable_items: Optional[bool] = Query(False, alias='hideUnavailableItems'),
):
    """
    Get list of the possible facets for a given query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product_search/{facets}',
    description=""" Lists the products for a given query. """,
    tags=['product_listing_search', 'facet_filter_management'],
)
def get_product_search__facets(
    facets: str = '/',
    query: Optional[str] = None,
    simulation_behavior: Optional[SimulationBehavior] = Query(
        'default', alias='simulationBehavior'
    ),
    count: Optional[float] = 24,
    page: Optional[float] = 1,
    sort: Optional[Sort] = None,
    locale: Optional[str] = None,
    hide_unavailable_items: Optional[bool] = Query(False, alias='hideUnavailableItems'),
):
    """
    Get list of products for a query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search_suggestions',
    description=""" Lists suggested terms similar to the search term. """,
    tags=['search_suggestions'],
)
def get_search_suggestions(query: Optional[str] = None, locale: Optional[str] = None):
    """
    Get list of suggested terms similar to the search term
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/top_searches',
    description=""" Lists the 10 most searched terms. """,
    tags=['search_suggestions'],
)
def get_top_searches(locale: Optional[str] = None):
    """
    Get list of the 10 most searched terms
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
